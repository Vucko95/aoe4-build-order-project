
import { type NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { api } from "~/utils/api";

type PlayerInfo = {
    player_name : string;
    max_rating : number;
    current_rating : number;   
}


const LeaderboardPage: NextPage = () => { 
    const [playerInfo, setPlayerinfo] = useState<PlayerInfo[]>([]);
    const [leaderboardType, setLeaderboardType] = useState("rm_solo");
    const [isLoading, setIsLoading] = useState<boolean>(false);

    useEffect(() => {
        const fetchLeaderboard = async () => {
            // const res = fetch('http://localhost:6969/leaderboards/qm_4v4');
            setIsLoading(true);
            const res = await fetch(`http://localhost:6969/leaderboards/${leaderboardType}`);
            const data = await (await res).json();
            setIsLoading(false);
            setPlayerinfo(data);
        }
        fetchLeaderboard();
    }, [leaderboardType])

    return (
        <>
          <Head>
            <title>Submit Build</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <main className="flex min-h-screen flex-row justify-center   gap-6 text-black dark:bg-gray-800 dark:text-black " >
          {/* <div className=""> */}
    
          
       {/* </div> */}
        <div className="flex flex-col items-center mt-20   ">

        <div className="text-center mb-5 ">

            <label  className="  items-center justify-center text-m font-medium text-gray-900 dark:text-white">
                    Select Leaderboard</label>

                    <select 
                    className=" min-w-[200px] text-center   bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block  p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 appearance-none"
                        value={leaderboardType}  
                        onChange={(e) => setLeaderboardType(e.target.value)}
                        id="select-civ" 
                        required> 

                        <option value="rm_solo">SOLO</option>
                        <option value="qm_1v1">1v1</option>
                        <option value="qm_2v2">2v2</option>
                        <option value="qm_3v3">3v3</option>
                        <option value="qm_4v4">4v4</option>

                    </select>
            </div>
            {isLoading ? (

            <div className="flex items-center justify-center h-64">
    <svg className="animate-spin h-5 w-5 mr-3 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4c0-3.309 2.691-6 6-6z"></path>
    </svg>
    <span className="text-white">Loading...</span>
  </div>
  ) : ( 
            <div className="max-h-[35%] overflow-y-auto h-64 "> 
                <table className="    m-10  text-sm text-left text-gray-500 dark:text-gray-400">
                    <thead className=" sticky  top-0 text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" className="px-6 py-3">
                                Player Name
                            </th>
                            <th scope="col" className="px-6 py-3">
                                Max Rating
                            </th>
                            <th scope="col" className="px-6 py-3">
                                Current Rating
                            </th>

                        </tr>
                    </thead>

                    <tbody  className="max-h-[25%] overflow-y-auto h-32">
                        {playerInfo.slice(0, 20).map((player, index) => (
                        <tr  className="bg-white border-b dark:bg-gray-800 dark:border-gray-700" key={index}>
                            <td  className="px-6 py-4" >{player.player_name}</td>
                            <td  className="px-6 py-4" >{player.max_rating}</td>
                            <td className="px-6 py-4" >{player.current_rating}</td>
                        </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            )}

        </div>

    
          </main>
        </>
      );

}


export default LeaderboardPage